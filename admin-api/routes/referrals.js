const express = require("express");
const db = require("../../bot/db/connect");
const verifyToken = require("../routes/verifyToken");
const router = express.Router();

// üì• –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
router.get("/referrals", verifyToken, async (req, res) => {
  try {
    const result = await db.query(`
      SELECT * FROM referrals
      ORDER BY created_at DESC
    `);
    res.json(result.rows);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö" });
  }
});

// üìä –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º
router.get("/referrals/summary", verifyToken, async (req, res) => {
  try {
    // –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    const totalRes = await db.query(`SELECT COUNT(*) FROM referrals`);
    const totalReferrals = parseInt(totalRes.rows[0].count, 10);

    // –¢–æ–ø-5 —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤ (–ø–æ referred_by)
    const topRes = await db.query(`
      SELECT referred_by, COUNT(*) as invited_count
      FROM referrals
      GROUP BY referred_by
      ORDER BY invited_count DESC
      LIMIT 5
    `);
    const topReferrers = topRes.rows;

    res.json({
      totalReferrals,
      topReferrers
    });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏" });
  }
});

// üì• –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—ã, –≥–¥–µ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π = userId
router.get("/referrals/:userId", verifyToken, async (req, res) => {
  try {
    const { userId } = req.params;
    const result = await db.query(`
      SELECT * FROM referrals
      WHERE referred_by = $1
    `, [userId]);
    res.json(result.rows);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö" });
  }
});

module.exports = router;