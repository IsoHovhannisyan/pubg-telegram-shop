const express = require('express');
const router = express.Router();
const db = require('../../bot/db/connect');
const verifyToken = require('../routes/verifyToken');
const multer = require('multer');
const path = require('path');
const sharp = require('sharp'); 
const fs = require('fs'); // ‚úÖ ‘±’æ’•’¨’°÷Å’æ’°’Æ ’ß

const sendProductPreview = require('../utils/sendProductPreview'); 

// ‚úÖ Setup for storing uploaded images
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, 'uploads/'); // make sure this folder exists
  },
  filename: (req, file, cb) => {
    const ext = path.extname(file.originalname);
    const uniqueName = Date.now() + '-' + Math.round(Math.random() * 1e5) + ext;
    cb(null, uniqueName);
  },
});

const upload = multer({ storage });


/////////////
// üì¶ ‘≤’•÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’¢’∏’¨’∏÷Ä ’°’∫÷Ä’°’∂÷Ñ’∂’•÷Ä’® ’®’Ω’ø category
router.get('/', async (req, res) => {
  const { category } = req.query;

  try {
    let query = 'SELECT * FROM products WHERE status = $1';
    let params = ['active'];

    if (category) {
      query += ' AND category = $2';
      params.push(category);
    }

    const result = await db.query(query, params);
    res.json(result.rows);
  } catch (err) {
    console.error("‚ùå Products fetch error:", err.message);
    res.status(500).json({ error: 'Failed to fetch products' });
  }
});


// üîê ‘±’æ’•’¨’°÷Å’∂’•’¨ ’∂’∏÷Ä ’°’∫÷Ä’°’∂÷Ñ (admin-’´÷Å)

router.post('/', verifyToken, upload.single('image'), async (req, res) => {
  const {
    name,
    price,
    stock,
    category,
    type,
    status,
    telegramId,
    isPreview // ‚¨ÖÔ∏è ‘±’æ’•’¨’°÷Å’æ’•’¨ ’ß
  } = req.body;

  const image = req.file?.filename || null;

  if (image) {
    const imagePath = path.join(__dirname, '..', '..', 'uploads', image);
    await sharp(imagePath)
      .resize(800, 800, { fit: 'inside' })
      .toFile(imagePath + '_resized.jpg');
    fs.unlinkSync(imagePath);
    fs.renameSync(imagePath + '_resized.jpg', imagePath);
  }

  if (!name || !price || !stock || !category) {
    return res.status(400).json({
      error: '’ä’°’Ø’°’Ω’∏’≤ ’§’°’∑’ø’•÷Ä÷â name, price, stock, category ’∫’°÷Ä’ø’°’§’´÷Ä ’•’∂',
    });
  }

  try {
    // ‚úÖ ‘µ’©’• preview ’ß’ù ’∏÷Ç’≤’°÷Ä’Ø’∏÷Ç’¥ ’•’∂÷Ñ Telegram ’∏÷Ç ’§’∏÷Ç÷Ä’Ω ’•’∂÷Ñ ’£’°’¨’´’Ω
    if (telegramId && image && isPreview === 'true') {
      const caption = `üÜï ’Ü’∏÷Ä ’°’∫÷Ä’°’∂÷Ñ’´ ’∂’°’≠’°’§’´’ø’∏÷Ç’¥:\n\nüì¶ ‘±’∂’∏÷Ç’∂: *${name}*\nüí∞ ‘≥’´’∂: *${price}‚ÇΩ*\nüóÇ ‘ø’°’ø’•’£’∏÷Ä’´’°: *${category}*\nüß© ’è’•’Ω’°’Ø: *${type === 'auto' ? '‘±’æ’ø’∏’¥’°’ø' : '’Ñ’°’∂’∏÷Ç’°’¨'}*`;

      const imagePath = path.join(__dirname, '..', '..', 'uploads', image);

      try {
        await sendProductPreview(telegramId, image, caption);
      } catch (err) {
      console.error("‚ùå Preview ’∏÷Ç’≤’°÷Ä’Ø’¥’°’∂ ’Ω’≠’°’¨:", err.message);
      }

  // ‚úÖ ’ã’∂’ª’∏÷Ç’¥ ’•’∂÷Ñ ’∂’Ø’°÷Ä’® preview-’´÷Å ’∞’•’ø’∏
  try {
    if (fs.existsSync(imagePath)) {
      fs.unlinkSync(imagePath);
    }
  } catch (err) {
    console.warn("‚ö†Ô∏è ’â’∞’°’ª’∏’≤’æ’•÷Å ’ª’∂’ª’•’¨ preview ’∂’Ø’°÷Ä’®:", err.message);
  }

  return res.json({ previewSent: true });
}


    // ‚úÖ ‘ª÷Ä’°’Ø’°’∂ ’°’∫÷Ä’°’∂÷Ñ’´ ’°’æ’•’¨’°÷Å’∏÷Ç’¥ ’¢’°’¶’°
    await db.query(
      `INSERT INTO products (name, price, stock, category, image, type, status)
       VALUES ($1, $2, $3, $4, $5, $6, $7)`,
      [name, price, stock, category, image, type || 'manual', status || 'active']
    );

    // ‚úÖ ’à÷Ç’≤’°÷Ä’Ø’∏÷Ç’¥ ’•’∂÷Ñ Telegram ’´÷Ä’°’Ø’°’∂ ’°’æ’•’¨’°÷Å’¥’°’∂ ’§’•’∫÷Ñ’∏÷Ç’¥
    if (telegramId && image) {
      const caption = `üÜï ’Ü’∏÷Ä ’°’∫÷Ä’°’∂÷Ñ ’°’æ’•’¨’°÷Å’æ’•’¨ ’ß:\n\nüì¶ ‘±’∂’∏÷Ç’∂: *${name}*\nüí∞ ‘≥’´’∂: *${price}‚ÇΩ*\nüóÇ ‘ø’°’ø’•’£’∏÷Ä’´’°: *${category}*\nüß© ’è’•’Ω’°’Ø: *${type === 'auto' ? '‘±’æ’ø’∏’¥’°’ø' : '’Ñ’°’∂’∏÷Ç’°’¨'}*`;
      await sendProductPreview(telegramId, image, caption);
    }

    res.json({ success: true });
  } catch (err) {
    console.error('‚ùå Product insert error:', err.message);
    res.status(500).json({ error: 'Database error' });
  }
});



// üîß ‘Ω’¥’¢’°’£÷Ä’•’¨ ’°’∫÷Ä’°’∂÷Ñ ’®’Ω’ø ID (admin-’´÷Å)
router.put('/:id', verifyToken, upload.single('image'), async (req, res) => {
  const { name, price, stock, category, type, status } = req.body;
  const image = req.file?.filename || null;
  const { id } = req.params;

  if (!name || !price || !stock || !category) {
    return res.status(400).json({
      error: '’ä’°’Ø’°’Ω’∏’≤ ’§’°’∑’ø’•÷Ä÷â name, price, stock, category ’∫’°÷Ä’ø’°’§’´÷Ä ’•’∂',
    });
  }

  try {
    if (image) {
      const imagePath = path.join(__dirname, '..', '..', 'uploads', image);
      await sharp(imagePath)
        .resize(800, 800, { fit: 'inside' })
        .toFile(imagePath + '_resized.jpg');
      fs.unlinkSync(imagePath);
      fs.renameSync(imagePath + '_resized.jpg', imagePath);

      await db.query(
        `UPDATE products
         SET name = $1, price = $2, stock = $3, category = $4, image = $5, type = $6, status = $7
         WHERE id = $8`,
        [name, price, stock, category, image, type || 'manual', status || 'active', id]
      );
    } else {
      await db.query(
        `UPDATE products
         SET name = $1, price = $2, stock = $3, category = $4, type = $5, status = $6
         WHERE id = $7`,
        [name, price, stock, category, type || 'manual', status || 'active', id]
      );
    }

    res.json({ success: true });
  } catch (err) {
    console.error('‚ùå Product update error:', err.message);
    res.status(500).json({ error: 'Database error' });
  }
});

// üì¶ Admin Panel ‚Äì get all products
router.get('/admin', verifyToken, async (req, res) => {
  try {
    const result = await db.query('SELECT * FROM products ORDER BY id DESC');
    res.json(result.rows);
  } catch (err) {
    console.error('‚ùå Fetch all products error:', err.message);
    res.status(500).json({ error: 'Database error' });
  }
});

// ‚ùå ’ã’∂’ª’•’¨ ’°’∫÷Ä’°’∂÷Ñ ’®’Ω’ø ID
router.delete('/:id', verifyToken, async (req, res) => {
  const { id } = req.params;

  try {
    // ’ç’Ø’¶’¢’∏÷Ç’¥ ’æ’•÷Ä÷Å’∂’∏÷Ç’¥ ’•’∂÷Ñ ’∂’Ø’°÷Ä’´ ’°’∂’∏÷Ç’∂’®, ’•’©’• ’Ø’°
    const result = await db.query('SELECT image FROM products WHERE id = $1', [id]);

    if (result.rowCount === 0) {
      return res.status(404).json({ error: '‘±’∫÷Ä’°’∂÷Ñ’® ’π’´ ’£’ø’∂’æ’•’¨' });
    }

    const imageName = result.rows[0].image;

    // ’ã’∂’ª’∏÷Ç’¥ ’•’∂÷Ñ ’°’∫÷Ä’°’∂÷Ñ’® ’¢’°’¶’°’µ’´÷Å
    await db.query('DELETE FROM products WHERE id = $1', [id]);

    // ‘µ’©’• ’Ø’° ’∂’Ø’°÷Ä’ù ’ª’∂’ª’∏÷Ç’¥ ’•’∂÷Ñ ’∂’°÷á ÷Ü’°’µ’¨’®
    if (imageName) {
      const imagePath = path.join(__dirname, '..', '..', 'uploads', imageName);
      if (fs.existsSync(imagePath)) {
        fs.unlinkSync(imagePath);
      }
    }

    res.json({ success: true });
  } catch (err) {
    console.error('‚ùå Product delete error:', err.message);
    res.status(500).json({ error: 'Database error' });
  }
});

// üì§ Preview product in Telegram
router.post('/preview/:id', verifyToken, async (req, res) => {
  const { id } = req.params;

  try {
    const result = await db.query('SELECT * FROM products WHERE id = $1', [id]);
    const product = result.rows[0];

    if (!product) {
      return res.status(404).json({ error: '‘±’∫÷Ä’°’∂÷Ñ’® ’π’´ ’£’ø’∂’æ’•’¨' });
    }

    await sendProductPreview(product);

    res.json({ success: true });
  } catch (err) {
    console.error('‚ùå Preview error:', err.message);
    res.status(500).json({ error: 'Preview failed' });
  }
});



module.exports = router;




