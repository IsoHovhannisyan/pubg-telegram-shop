// ===============================
// ‚úÖ bot.js (—Ñ–∏–Ω–∞–ª—å–Ω—ã–π: SHOP + –≤—ã–±–æ—Ä UC/–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏)
// ===============================

const { Telegraf, Markup } = require('telegraf');
require('dotenv').config();
require('../admin-api/adminApi');

const startHandler = require('./handlers/start');
const catalog = require('./handlers/catalog');
const catalogAuto = require('./handlers/catalogAuto');
const catalogManual = require('./handlers/catalogManual');
const cartHandler = require('./handlers/cart');
const orderHandler = require('./handlers/orders');
const registerOrder = require('./handlers/orderHandler');
const popularById = require('./handlers/popular_by_id');
const popularHome = require('./handlers/popular_home');
const carsHandler = require('./handlers/cars');
const db = require('./db/connect');
const { handleUserIdSubmission } = require('./handlers/sendOrderToCorrectTarget');
const costumesHandler = require('./handlers/xcostumes');
const getShopStatus = require('./utils/getShopStatus');
const checkShopOpen = require('./middlewares/checkShopOpen');
const referralsHandler = require('./handlers/referrals');

const getLang = require('./utils/getLang');

const bot = new Telegraf(process.env.BOT_TOKEN);

bot.use(async (ctx, next) => {
  // ’ç’ø’∏÷Ç’£’∏÷Ç’¥ ’•’∂÷Ñ ’¥’´’°’µ’∂ ’ø’•÷Ñ’Ω’ø’•÷Ä, command-’∂’•÷Ä ÷á callback-’∂’•÷Ä
  if (ctx.updateType === 'message' || ctx.updateType === 'callback_query') {
    return checkShopOpen(ctx, next);
  }
  return next();
});


// üì¶ start-–∫–æ–º–∞–Ω–¥–∞
bot.start(async (ctx) => {
  const lang = await getLang(ctx);
  await require('./handlers/start')(ctx);
  // –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
  // (–ª–æ–≥–∏–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ —É–∂–µ –µ—Å—Ç—å –≤ lang callback, –Ω–æ –¥—É–±–ª–∏—Ä—É–µ–º –¥–ª—è —Å—Ç–∞—Ä—Ç–∞)
  // (–µ—Å–ª–∏ –º–µ–Ω—é –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞, —Ç–æ —ç—Ç–æ—Ç –±–ª–æ–∫ –º–æ–∂–Ω–æ –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å)
});

// üìö –ö–æ–º–∞–Ω–¥—ã
bot.command('cart', cartHandler.showCart);
bot.command('orders', orderHandler);

// üîÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
bot.hears(async (text, ctx) => {
  const lang = await getLang(ctx);

  if (text === lang.menu.shop || text === lang.menu.catalog) {
    return ctx.reply(lang.catalog.selectCategory || "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", Markup.inlineKeyboard([
      [Markup.button.callback('üíé UC', 'open_uc_catalog')],
      [Markup.button.callback('üìà –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å', 'open_popularity_catalog')],
      [Markup.button.callback('üöó –ú–∞—à–∏–Ω—ã', 'category:cars')],
      [Markup.button.callback('üé≠ X-–ö–æ—Å—Ç—é–º—ã', 'category:xcostumes')]
    ]));
  }

  if (text === lang.menu.cart) return cartHandler.showCart(ctx);
  if (text === lang.menu.orders) return orderHandler(ctx);
  if (text === lang.menu.referrals) return referralsHandler(ctx);
});

// üü° –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ callback_query
bot.on('callback_query', async (ctx) => {
  const data = ctx.callbackQuery.data;
  const lang = await getLang(ctx);

  // ‚úÖ –í—ã–±–æ—Ä —è–∑—ã–∫–∞
  if (data.startsWith('lang_')) {
    const selectedLang = data.split('_')[1];
    await db.query(
      `INSERT INTO users (telegram_id, language)
       VALUES ($1, $2)
       ON CONFLICT (telegram_id) DO UPDATE
       SET language = EXCLUDED.language`,
      [ctx.from.id, selectedLang]
    );
    const langFile = require(`../lang/${selectedLang}`);
    await ctx.reply(langFile.start.welcome, Markup.keyboard([
      [langFile.menu.shop],
      [langFile.menu.orders],
      [langFile.menu.cart],
      [langFile.menu.referrals]
    ]).resize());
    return ctx.answerCbQuery("‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω");
  }

  // ‚úÖ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ UC
  if (data === 'open_uc_catalog') {
    return ctx.reply("üíé –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø UC", Markup.inlineKeyboard([
      [Markup.button.callback('‚ö°Ô∏è UC –ø–æ ID', 'open_uc_auto')],
      [Markup.button.callback('üßæ UC –ø–æ –≤—Ö–æ–¥—É', 'open_uc_manual')]
    ]));
  }

  // ‚úÖ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
  if (data === 'open_popularity_catalog') {
    return ctx.reply("üìà –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏", Markup.inlineKeyboard([
      [Markup.button.callback('üë§ –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –ø–æ ID', 'go_popularity_by_id')],
      [Markup.button.callback('üè† –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –¥–æ–º–∞ –ø–æ ID', 'go_popularity_home')]
    ]));
  }

  // ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
  if (data === 'open_uc_auto') return catalogAuto(ctx);
  if (data === 'open_uc_manual') return catalogManual(ctx);
  if (data === 'go_popularity_by_id') return popularById(ctx);
  if (data === 'go_popularity_home') return popularHome(ctx);
  if (data === 'category:cars') return carsHandler(ctx);

  // ‚úÖ –ú–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–∞ –∏–∑ –∫–Ω–æ–ø–∫–∏ "üõç –ú–∞–≥–∞–∑–∏–Ω"
  if (data === 'open_shop_menu') {
    try {
      await ctx.answerCbQuery('üì¶ –û—Ç–∫—Ä—ã–≤–∞—é –º–∞–≥–∞–∑–∏–Ω...');
    } catch (err) {
      console.warn('‚ö†Ô∏è answerCbQuery error:', err.message);
    }

    return ctx.reply(lang.catalog?.selectCategory || "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", Markup.inlineKeyboard([
      [Markup.button.callback('üíé UC', 'open_uc_catalog')],
      [Markup.button.callback('üìà –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å', 'open_popularity_catalog')],
      [Markup.button.callback('üöó –ú–∞—à–∏–Ω—ã', 'category:cars')],
      [Markup.button.callback('üé≠ X-–ö–æ—Å—Ç—é–º—ã', 'category:xcostumes')]
    ]));
  }

  // ‚úÖ Callback-–∏ —Ç–æ–≤–∞—Ä–æ–≤
  if (data.startsWith('uc_')) return catalog.callbackQuery(ctx);
  if (data.startsWith('pop_')) return popularById.callbackQuery(ctx);
  if (data.startsWith('pophome_')) return popularHome.callbackQuery(ctx);
  if (data.startsWith('car_') || data.startsWith('show_car_')) return carsHandler.callbackQuery(ctx);
  if (data.startsWith('costume_') || data.startsWith('show_costume_')) return costumesHandler.callbackQuery(ctx);
  if (data === 'category:xcostumes') return costumesHandler(ctx);

  // ‚úÖ Callback-–∏ –∫–æ—Ä–∑–∏–Ω—ã
  if (["inc_", "dec_", "del_"].some(p => data.startsWith(p))) return cartHandler.callbackQuery(ctx);

  if ([
    "go_to_cart",
    "open_catalog",
    "open_uc_catalog",
    "open_popularity_catalog",
    "confirm_order",
    "cancel_order",
    "back_to_catalog",
    "go_back"
  ].includes(data)) return cartHandler.callbackQuery(ctx);

  if (data === 'open_referrals') return referralsHandler(ctx);
});

// üßæ –í–≤–æ–¥ PUBG ID
bot.on('text', handleUserIdSubmission);

// ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch();
console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω —Å –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã–º SHOP-–º–µ–Ω—é');

module.exports = { bot };












