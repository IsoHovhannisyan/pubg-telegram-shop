const axios = require('axios');
require('dotenv').config();
const { Markup } = require('telegraf');

const generateFreekassaLink = require('../utils/freekassaLink');

const MANAGER_IDS = process.env.MANAGER_CHAT_ID ? process.env.MANAGER_CHAT_ID.split(',') : [];
const API_URL = process.env.API_URL || 'http://localhost:3001';
const API_TOKEN = process.env.ADMIN_API_TOKEN;

// Add axios instance with default headers
const api = axios.create({
  baseURL: API_URL,
  headers: {
    'Authorization': `Bearer ${API_TOKEN}`,
    'Content-Type': 'application/json'
  }
});

function formatItems(items) {
  return items.map(i => `‚ñ´Ô∏è ${i.title || i.name} x${i.qty} ‚Äî ${i.price * i.qty} ‚ÇΩ`).join('\n');
}

function getTotal(items) {
  return items.reduce((sum, i) => sum + (i.price * i.qty), 0);
}

function buildManagerMessage(ctx, pubgId, manualItems, nickname) {
  const userId = ctx.from.id;
  const userTag = ctx.from.username ? `@${ctx.from.username}` : ctx.from.first_name;

  let message = `üéûÔ∏è –ù–æ–≤—ã–π –ú–∞–Ω—É–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑\n\n`;
  message += `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userTag} (${userId})\n`;
  message += `üéÆ PUBG ID: ${pubgId}\n`;
  if (nickname) {
    message += `üëë –ù–∏–∫–Ω–µ–π–º: ${nickname}\n`;
  }

  message += `\nüì¶ –ú–∞–Ω—É–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:\n${formatItems(manualItems)}\n`;
  message += `üí∞ –°—É–º–º–∞: ${getTotal(manualItems)} ‚ÇΩ\n`;

  return message;
}

async function getProductCategories(items) {
  const ids = items
    .map(i => parseInt(i.id))
    .filter(id => !isNaN(id));

  if (ids.length === 0) return items;

  try {
    const res = await api.get('/admin/products', {
      params: { ids: ids.join(',') }
    });
    
    const categoryMap = {};
    res.data.forEach(row => {
      categoryMap[row.id] = row.category;
    });

    return items.map(i => {
      const parsedId = parseInt(i.id);
      return {
        ...i,
        category: !isNaN(parsedId) ? (categoryMap[parsedId] || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏') : '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
      };
    });
  } catch (err) {
    console.error('Error fetching product categories:', err);
    return items;
  }
}

function getStatusLabel(status) {
  switch (status) {
    case 'unpaid':
      return '–ù–µ–æ–ø–ª–∞—á–µ–Ω';
    case 'pending':
      return '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ';
    case 'manual_processing':
      return '–û–∂–∏–¥–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞';
    case 'delivered':
      return '–î–æ—Å—Ç–∞–≤–ª–µ–Ω';
    case 'error':
      return '–û—à–∏–±–∫–∞';
    default:
      return status;
  }
}

async function registerOrder(ctx, pubgId, items, nickname) {
  const userId = ctx.from.id;
  const createdAt = new Date();

  // Defensive check: if any item requires a PUBG ID, and pubgId is missing/invalid, show error and do not insert
  const needsPubgId = items.some(i => i.type === 'auto' || i.type === 'manual');
  if (needsPubgId && (!pubgId || typeof pubgId !== 'string' || !/^\d{5,20}$/.test(pubgId))) {
    await ctx.reply('‚ùå –î–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π PUBG ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ –∏ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID.');
    return;
  }

  const categorizedItems = await getProductCategories(items);

  const autoItems = categorizedItems.filter(
    i => i.type === 'auto' && i.category === 'uc_by_id'
  );

  const manualItems = categorizedItems.filter(
    i => !(i.type === 'auto' && i.category === 'uc_by_id')
  );

  console.log("üßæ INSERT DATA:");
  console.log("UserID:", userId);
  console.log("PUBG ID:", pubgId);
  console.log("Nickname:", nickname);
  console.log("Manual Items:", manualItems.length);
  console.log("Auto Items:", autoItems.length);

  try {
    // Generate a unique checkout_id for this cart/checkout
    const checkoutId = Date.now() + '-' + userId;
    // Register orders through admin panel API
    let autoOrder = null;
    let manualOrder = null;
    if (manualItems.length > 0) {
      const res = await api.post('/admin/orders', {
        user_id: userId,
        pubg_id: pubgId,
        products: manualItems,
        time: createdAt,
        status: 'unpaid',
        nickname: nickname,
        checkout_id: checkoutId
      });
      manualOrder = res.data;
      console.log('‚úÖ Manual order registered as unpaid');
    }

    if (autoItems.length > 0) {
      const res = await api.post('/admin/orders', {
        user_id: userId,
        pubg_id: pubgId,
        products: autoItems,
        time: createdAt,
        status: 'unpaid',
        nickname: nickname,
        checkout_id: checkoutId
      });
      autoOrder = res.data;
      console.log('‚úÖ Auto order registered as unpaid');
    }

    // üåü Build final message
    let finalMessage = `‚úÖ <b>–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>\n\n`;
    finalMessage += `üéÆ <b>PUBG ID:</b> <code>${pubgId}</code>\n`;
    if (nickname) {
      finalMessage += `üë§ <b>–ù–∏–∫–Ω–µ–π–º:</b> ${nickname}\n`;
    }

    const autoSum = autoItems.reduce((sum, i) => sum + (i.price * i.qty), 0);
    const manualSum = manualItems.reduce((sum, i) => sum + (i.price * i.qty), 0);
    const fullSum = autoSum + manualSum;

    finalMessage += `üíµ <b>–û–ë–©–ê–Ø –°–£–ú–ú–ê:</b> <u>${fullSum} ‚ÇΩ</u>\n`;
    finalMessage += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;

    // Add auto-activated products to the message
    if (autoItems.length > 0) {
      const ucList = autoItems.map(i => `‚Ä¢ ${i.title || i.name} x${i.qty} ‚Äî ${i.price * i.qty} ‚ÇΩ`).join('\n');
      finalMessage += `üí≥ <b>–ê–≤—Ç–æ-–¥–æ—Å—Ç–∞–≤–∫–∞ (UC):</b>\n${ucList}\n`;
      finalMessage += `üí∞ <b>–°—É–º–º–∞:</b> ${autoSum} ‚ÇΩ\n`;
    }

    // Add manual products to the message
    if (manualItems.length > 0) {
      const manualList = manualItems.map(i => `‚Ä¢ ${i.title || i.name} x${i.qty} ‚Äî ${i.price * i.qty} ‚ÇΩ`).join('\n');
      finalMessage += `üßç <b>–†—É—á–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞:</b>\n${manualList}\n`;
      finalMessage += `üëâ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä\n`;
    }

    // If both auto and manual products are present, add an explanation message
    if (autoItems.length > 0 && manualItems.length > 0) {
      finalMessage += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
      finalMessage += `‚ÑπÔ∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n`;
      finalMessage += `–í –≤–∞—à –∑–∞–∫–∞–∑ –≤—Ö–æ–¥—è—Ç —Ç–æ–≤–∞—Ä—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:\n`;
      finalMessage += `‚Ä¢ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞</b> ‚Äî UC –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.\n`;
      finalMessage += `‚Ä¢ <b>–†—É—á–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞</b> ‚Äî –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.\n`;
    }

    // Determine the payment URL based on the order type
    let payUrl;
    if (autoItems.length > 0 && autoOrder) {
      payUrl = `https://pubg-telegram-shop.vercel.app/payment/${autoOrder.id}?amount=${fullSum}`;
    } else if (manualItems.length > 0 && manualOrder) {
      payUrl = `https://pubg-telegram-shop.vercel.app/payment/${manualOrder.id}?amount=${fullSum}`;
    }

    // Send the unified message with payment button if applicable
    if (payUrl) {
      await ctx.replyWithHTML(
        finalMessage + '–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:',
        Markup.inlineKeyboard([
          [Markup.button.url('üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', payUrl)]
        ])
      );
    } else {
      await ctx.replyWithHTML(finalMessage);
    }
  } catch (err) {
    console.error('Error registering order:', err);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

module.exports = registerOrder;
